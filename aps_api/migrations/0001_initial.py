# Generated by Django 5.0.6 on 2024-05-27 01:26

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('telephone', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('family_type', models.IntegerField(choices=[(1, 'Nuclear biparental'), (2, 'Nuclear monoparental'), (3, 'Extenso biparental'), (4, 'Extenso monoparental'), (5, 'Compuesto biparental'), (6, 'Compuesto monoparental'), (7, 'Uniparental')])),
                ('total_members', models.PositiveIntegerField(default=0)),
                ('imagen', models.ImageField(blank=True, null=True, upload_to='famlygraphs/')),
                ('family_graphic', models.IntegerField(choices=[(1, 'Biologicos'), (2, 'Psicologicos'), (3, 'Sociales')])),
                ('apgar', models.IntegerField(choices=[(1, 'Normal'), (2, 'Disfuncion leve'), (3, 'Disfuncion moderada'), (4, 'Disfuncion severa')])),
                ('carer', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('zarit', models.IntegerField(choices=[(1, 'Ausencia de sobrecarga'), (2, 'Sobrecarga ligera'), (3, 'Sobrecarga intensa')], null=True)),
                ('ecomapa', models.IntegerField(choices=[(1, 'Positivo'), (2, 'Tenue'), (3, 'Estresante'), (4, 'Fluye'), (5, 'Intenso')])),
                ('observation', models.CharField(blank=True, max_length=500, null=True)),
                ('number_family', models.CharField(blank=True, max_length=60, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InfoGeneral',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type_register', models.IntegerField(default=2)),
                ('number_register', models.IntegerField(default=1)),
                ('consent', models.IntegerField(default=1)),
                ('departament', models.CharField(choices=[('05', 'Antioquia'), ('08', 'Atlántico'), ('11', 'Bogotá D.C.'), ('13', 'Bolívar'), ('15', 'Boyacá'), ('17', 'Caldas'), ('18', 'Caquetá'), ('19', 'Cauca'), ('20', 'Cesar'), ('23', 'Córdoba'), ('25', 'Cundinamarca'), ('27', 'Chocó'), ('41', 'Huila'), ('44', 'La Guajira'), ('47', 'Magdalena'), ('50', 'Meta'), ('52', 'Nariño'), ('54', 'Norte de Santander'), ('63', 'Quindío'), ('66', 'Risaralda'), ('68', 'Santander'), ('70', 'Sucre'), ('73', 'Tolima'), ('76', 'Valle del Cauca'), ('81', 'Arauca'), ('85', 'Casanare'), ('86', 'Putumayo'), ('88', 'Archipiélago de San Andrés, Providencia y Santa Catalina'), ('91', 'Amazonas'), ('94', 'Guainía'), ('95', 'Guaviare'), ('97', 'Vaupés'), ('99', 'Vichada')], max_length=2)),
                ('zonal_unit', models.CharField(default='UZPE999', max_length=7)),
                ('municipality', models.CharField(choices=[('52001', 'Pasto'), ('52019', 'Albán'), ('52022', 'Aldana'), ('52036', 'Ancuya'), ('52051', 'Arboleda'), ('52079', 'Barbacoas'), ('52083', 'Belén'), ('52110', 'Buesaco'), ('52203', 'Colón'), ('52207', 'Consacá'), ('52210', 'Contadero'), ('52215', 'Córdoba'), ('52224', 'Cuaspud Carlosama'), ('52227', 'Cumbal'), ('52233', 'Cumbitara'), ('52240', 'Chachagüí'), ('52250', 'El Charco'), ('52254', 'El Peñol'), ('52256', 'El Rosario'), ('52258', 'El Tablón de Gómez'), ('52260', 'El Tambo'), ('52287', 'Funes'), ('52317', 'Guachucal'), ('52320', 'Guitarilla'), ('52323', 'Gualmatán'), ('52352', 'Iles'), ('52354', 'Imués'), ('52356', 'Ipiales'), ('52378', 'La Cruz'), ('52381', 'La Florida'), ('52385', 'La Llanada'), ('52390', 'La Tola'), ('52399', 'La Unión'), ('52405', 'Leiva'), ('52411', 'Linares'), ('52418', 'Los Andes'), ('52427', 'Magüí'), ('52435', 'Mallama'), ('52473', 'Mosquera'), ('52480', 'Nariño'), ('52490', 'Olaya Herrera'), ('52506', 'Ospina'), ('52520', 'Francisco Pizarro'), ('52540', 'Policarpa'), ('52560', 'Potosí'), ('52565', 'Providencia'), ('52573', 'Puerres'), ('52585', 'Pupiales'), ('52612', 'Ricaurte'), ('52621', 'Roberto Payán'), ('52678', 'Samaniego'), ('52683', 'Sandoná'), ('52685', 'San Bernardo'), ('52687', 'San Lorenzo'), ('52693', 'San Pablo'), ('52694', 'San Pedro de Cartago'), ('52696', 'Santa Bárbara'), ('52699', 'Santacruz'), ('52720', 'Sapuyes'), ('52786', 'Taminango'), ('52788', 'Tangua'), ('52835', 'San Andrés de Tumaco'), ('52838', 'Túquerres'), ('52885', 'Yacuanquer')], max_length=5)),
                ('territory', models.CharField(default='T99', max_length=3)),
                ('microterritory', models.CharField(default='T99', max_length=4)),
                ('name_branding', models.CharField(max_length=200)),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('longitud', models.DecimalField(decimal_places=8, max_digits=11)),
                ('latitud', models.DecimalField(decimal_places=8, max_digits=10)),
                ('home_location', models.CharField(blank=True, max_length=200, null=True)),
                ('id_familia', models.CharField(blank=True, max_length=32)),
                ('estratum', models.IntegerField(choices=[(1, 'Bajo bajo'), (2, 'Bajo'), (3, 'Medio-bajo'), (4, 'Medio'), (5, 'Medio-alto'), (6, 'Alto')])),
                ('households', models.CharField(blank=True, default='1', max_length=1, validators=[django.core.validators.RegexValidator(message='Este campo solo debe contener números.', regex='^[0-9]+$')])),
                ('num_families', models.IntegerField(blank=True, default=0, validators=[django.core.validators.RegexValidator(message='Este campo solo debe contener números.', regex='^[0-9]+$')])),
                ('people', models.IntegerField(blank=True, default=1, validators=[django.core.validators.RegexValidator(message='Este campo solo debe contener números.', regex='^[0-9]+$')])),
                ('basic_team', models.CharField(blank=True, max_length=27)),
                ('id_primary_provider', models.CharField(choices=[('5200100107', 'cehani ese'), ('5200100441', 'universidad de nariño'), ('5200100739', 'unidad administrativa especial de aeronáutica civil - aerocivil'), ('5200101102', 'e.s.e. hospital universitario departamental de nariño'), ('5200101457', 'empresa social del estado pasto salud e.s.e.'), ('5201901434', 'ese centro de salud san jose'), ('5202201506', 'e.s.e. centro de salud nuestra señora del pilar'), ('5203600988', 'centro de salud ancuya e.s.e.'), ('5205101413', 'e.s.e centro de salud san miguel'), ('5207900055', 'asociacion de autoridades y cabildos awa unipa'), ('5207901407', 'e.s.e. hospital san antonio de barbacoas'), ('5208301384', 'e.s.e. centro de salud belen'), ('5211001504', 'e.s.e. centro de salud virgen de lourdes'), ('5220301389', 'e.s.e. centro de salud la buena esperanza'), ('5220700926', 'centro de salud de consaca empresa social del estado'), ('5221001762', 'centro de salud sagrado corazon de jesus e.s.e.'), ('5221500494', 'centro de salud indigena del resguardo de males'), ('5221500902', 'centro de salud de san bartolome de cordoba ese'), ('5222400108', 'ips indigena de carlosama de la asociacion de autoridades indigenas de los pastos'), ('5222400914', 'centro de salud cuaspud-carlosama empresa social del estado'), ('5222700091', 'ips intercultural indigena de los cabildos del gran cumbal panan y mayasquer'), ('5222700110', 'ips del cabildo indigena de chiles'), ('5222700321', 'ese hospital cumbal'), ('5223301542', 'e.s.e. san pedro de cumbitara'), ('5224001399', 'e.s.e. centro de salud nuestra señora de fátima'), ('5225000974', 'hospital sagrado corazón de jesús empresa social del estado de el charco'), ('5225401388', 'e.s.e centro de salud san isidro de el peñol'), ('5225601409', 'ese de primer nivel de el municipio de el rosario'), ('5225801507', 'e.s.e. centro de salud del tablon de gomez'), ('5225801827', 'ips-i del pueblo inga en aponte'), ('5226001436', 'centro hospital san luis e.s.e.'), ('5228701440', 'centro de salud funes e.s.e.'), ('5231700077', 'ips-i asociacion de cabildos de guachucal y colimba'), ('5231700660', 'hospital guachucal ese'), ('5231701009', 'ips indigena del resguardo de muellamues'), ('5232000371', 'centro hospital guaitarilla e.s.e.'), ('5232301390', 'centro de salud señor de los milagros de gualmatán - empresa social del estado - e.s.e.'), ('5235200407', 'centro de salud iles e.s.e.'), ('5235401414', 'empresa social del estado santiago apostol e.s.e.'), ('5235600097', 'asociacion de cabildos indigenas zona ipiales'), ('5235600356', 'hospital civil de ipiales ese'), ('5235601166', 'institucion prestadora de servicios de salud indígena guaitara'), ('5235601503', 'ips municipal de ipiales e.s.e.'), ('5235601734', 'ips indígena mallamás'), ('5237800240', 'hospital el buen samaritano e.s.e. la cruz'), ('5238101502', 'centro hospital de la florida empresa social del estado'), ('5238501829', 'ese centro de salud san juan bosco'), ('5239001462', 'empresa social del estado centro de salud nuestra señora del carmen'), ('5239900234', 'e.s.e hospital eduardo santos'), ('5239900886', 'centro de salud municipal nivel i luis acosta e.s.e'), ('5240501543', 'ese centro de salud san jose de leiva'), ('5241100896', 'e.s.e. juan pablo ii del municipio de linares'), ('5241801463', 'e.s.e centro de salud de los andes'), ('5242700696', 'centro de salud saul quiñones e.s.e.'), ('5243500903', 'centro de salud santiago de mallama e.s.e.'), ('5247301525', 'e.s.e. centro de salud san francisco'), ('5248001387', 'e.s.e. centro de salud san sebastian'), ('5249001485', 'centro de salud camilo hurtdao cifuentes ese.'), ('5250601433', 'centro de salud san miguel arcangel de ospina ese'), ('5252001392', 'e.s.e. centro de salud señor del mar'), ('5254001487', 'e.s.e. centro de salud policarpa'), ('5256000237', 'e.s.e centro hospital luis antonio montero'), ('5256500972', 'centro de salud de providencia e.s.e.'), ('5257300562', 'centro hospital nuestro señor de la divina misericordia puerres e.s.e.'), ('5258500933', 'centro de salud san juan bautista de pupiales empresa social del estado'), ('5261201394', 'hospital ricaurte empresa social del estado'), ('5262101493', 'e.s.e. centro hospital las mercedes'), ('5267800613', 'ese hospital lorencita villegas de santos'), ('5268300609', 'ese hospital clarita santos de sandona'), ('5268501378', 'ese centro de salud san bernardo'), ('5268701557', 'e.s.e. centro de salud san lorenzo'), ('5269300351', 'hospital san carlos e.s.e.'), ('5269401373', 'e.s.e. centro de salud municipal de cartago'), ('5269601494', 'e.s.e. centro de salud santa barbara iscuande'), ('5269900716', 'ips indigena mingasalud resguardo indigena de guachavez'), ('5269901368', 'e.s.e. centro de salud guachavés'), ('5272001059', 'centro de salud sapuyes e.s.e.'), ('5278601536', 'e.s.e. centro hospital san juan bautista'), ('5278801372', 'centro de salud hermes andrade mejia ese tangua'), ('5283500260', 'hospital san andres e.s.e.'), ('5283500905', 'centro hospital divino niño empresa social del estado'), ('5283800483', 'ips indigena julian carlosama'), ('5288501383', 'centro de saludya e.s.e. de yacuanquer')], max_length=10)),
                ('id_ficha', models.CharField(blank=True, max_length=27)),
                ('creation_date', models.DateField(auto_now_add=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name='Names',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('second_name', models.CharField(blank=True, max_length=60, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('last_name', models.CharField(max_length=60, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('second_last_name', models.CharField(blank=True, max_length=60, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('id_document', models.CharField(db_index=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Este campo solo debe contener números.', regex='^[0-9]+$')])),
            ],
        ),
        migrations.CreateModel(
            name='ChannelEntity',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250)),
                ('type', models.CharField(max_length=250)),
                ('campus', models.CharField(max_length=15)),
                ('contact', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.contact')),
            ],
        ),
        migrations.CreateModel(
            name='FamilyContext',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('younger', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('pregnant', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('senior', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('victim', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('disable', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('patient', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('infected_person', models.IntegerField(choices=[(1, 'TP'), (2, 'Lepra'), (3, 'Escabiosis, enfermedades infecciosas en la piel u otras'), (4, 'Malaria'), (5, 'Dengue'), (6, 'Changas'), (7, 'Epatitis A'), (8, 'Algunas enfermedades hinmunoprevenible')], null=True)),
                ('event_noted', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('vulneravility', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('risk_psychosocial', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('antecedent_salud', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('antecedent', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('source_food', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Cultiva'), (2, 'Cria de animales'), (3, 'Caseria'), (4, 'Recoleccion de alimentos'), (5, 'Trueque o intercambio'), (6, 'Compra'), (7, 'Asistencia del estado'), (8, 'Ayuda humanitaria'), (9, 'Otro')]), size=None)),
                ('descripcion_source', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('healthy_habits', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('socioemotional', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('environment_care', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('healthy_relationships', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('health_support', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('senior_protection', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('family_welfare', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('scl_conservation', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('recognition_rights', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('family', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.family')),
            ],
        ),
        migrations.AddField(
            model_name='family',
            name='info_general',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='family', to='aps_api.infogeneral'),
        ),
        migrations.CreateModel(
            name='LivingPlace',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type_living_place', models.IntegerField(verbose_name=((1, 'Casa'), (2, 'Casa indigena'), (3, 'Carpa'), (4, 'Apartamento'), (5, 'Pieza/Cuarto en Inclinato'), (6, 'Contenedor'), (7, 'Embarcacion'), (8, 'Vagon'), (9, 'Refugio Natural'), (10, 'Cueva'), (11, 'Puente'), (12, 'Otro')))),
                ('description', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('wall_material', models.IntegerField(verbose_name=((1, 'Bloque, ladrillo, piedra, madera pulida'), (2, 'Tapia pisada, adobe'), (3, 'Bahareque'), (4, 'Material prefabricado'), (5, 'Madera burda, tabla, tablón'), (6, 'Guadua, casa, esterilla, otro vegetal'), (7, 'Zinc, tela, lona, cartón, latas, desechos, plástico'), (8, 'Otro'), (9, 'Sin pared')))),
                ('other_wall_material', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('floor_material', models.IntegerField(verbose_name=((1, 'Alfombra o tapete, mármol, parque, madera pulida y lacada'), (2, 'Baldosa, vinilo, tableta, ladrillo'), (3, 'Cemento, gravilla'), (4, 'Madera burda, madera en mal estado, tabla, tablón'), (5, 'Tierra o arena'), (6, 'Otro')))),
                ('other_floor_material', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('roof_material', models.IntegerField(verbose_name=((1, 'Concreto'), (2, 'Teja de Barro'), (3, 'Fibrocemento'), (4, 'Zinc'), (5, 'Palma o Paja'), (6, 'Plastico'), (7, 'Desechos (cartón, lata, tela, sacos, etc)'), (8, 'Otro')))),
                ('other_roof_material', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('bedrooms', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50), django.core.validators.RegexValidator(message='Este campo solo debe contener números.', regex='^[0-9]+$')])),
                ('over_population', models.IntegerField(verbose_name=((1, 'Si'), (2, 'No')))),
                ('irrigation_scenarios', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'Objetos cortantes o punzantes al alcance de los niños'), (2, 'Sustancias químicas al alcance de los niños'), (3, 'Medicamentos al alcance de los niños'), (4, 'Velas, velones, incienso encendido en la vivienda'), (5, 'Conexiones eléctricas en mal estado o sobrecargadas'), (6, 'Botones, canicas entre otros objetos pequeños o con piezas que puedan desmontarse, al alcance de los niños'), (7, 'Pasillos obstruidos con juguetes, sillas u otros objetos'), (8, 'Superficies resbaladizas, suelos con agua, grasas, aceites, entre otros'), (9, 'Tanques o recipientes de almacenamiento de agua sin tapa'), (10, 'Escaleras sin protección')], null=True), size=None)),
                ('access_to_home', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'Medios de transporte (Buses, autos, camiones, lanchas, etc)'), (2, 'Parques, y áreas deportivas, Centros sociales y/o recreacionales'), (3, 'Instituciones educativas'), (4, 'Servicios de salud'), (5, 'Ninguna')], null=True), size=None)),
                ('food_source', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'Electricidad'), (2, 'Gas natural'), (3, 'Gas Licuado del petróleo (gas propano)'), (4, 'Leña, madera o carbón de leña'), (5, 'Petróleo, gasolina, kerosén, alcohol'), (6, 'Carbón mineral'), (7, 'Materiales de desecho'), (8, 'Otro')], null=True), size=None)),
                ('other_food_source', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('transmitting_vectors', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('vectors_description', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('places_around', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'Cultivos'), (2, 'Apriscos'), (3, 'Porquerizas'), (4, 'Galpones'), (5, 'Terrenos baldíos'), (6, 'Presencia de Plagas: roedores, cucarachas, zancudos, etc.'), (7, 'Ruido o sonidos desagradables'), (8, 'Malos olores'), (9, 'Sitios satélites de disposición de excretas'), (10, 'Rellenos sanitarios/botaderos'), (11, 'Industrias Contaminantes (del sector energético, minero, transporte, construcción, manufacturera, entre otros)'), (12, 'Contaminación visual'), (13, 'Río o quebrada'), (14, 'Planta de tratamiento de agua residual'), (15, 'Extracción minera'), (16, 'Canales de agua lluvia'), (17, 'Vías de tráfico vehicular'), (18, 'Quemas a cielo abierto'), (19, 'Otro'), (20, 'Ninguno')], null=True), size=None)),
                ('other_places_around', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('economic_activity', models.IntegerField(verbose_name=((1, 'Si'), (2, 'No')))),
                ('animals', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'Perros'), (2, 'Gatos'), (3, 'Porcinos'), (4, 'Bóvidos: Búfalos, vacas, toros'), (5, 'Equidos: Asnos, mulas, caballos, burros'), (6, 'Ovinos / caprino'), (7, 'Aves de producción'), (8, 'Aves ornamentales'), (9, 'Peces ornamentales, hamster'), (10, 'Cobayos, conejos'), (11, 'Animales silvestres'), (12, 'Otro'), (13, 'Ninguno')], null=True), size=None)),
                ('other_animals', models.CharField(blank=True, max_length=30, null=True)),
                ('info_general', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.infogeneral')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('present_person', models.IntegerField(choices=[(1, 'Si'), (2, 'No')], db_index=True)),
                ('type_register', models.IntegerField(default=2)),
                ('consent', models.IntegerField(blank=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('type_id', models.CharField(choices=[('CC', 1), ('CD', 2), ('CE', 3), ('MS', 4), ('CN', 5), ('PA', 6), ('PE', 7), ('PT', 8), ('RC', 9), ('TI', 10)], max_length=15)),
                ('date_birth', models.DateField(db_index=True)),
                ('sex', models.IntegerField(choices=[(1, 'Hombre'), (2, 'Mujer'), (3, 'Indeterminado')])),
                ('role', models.IntegerField(choices=[(1, 'Jefe(a) de Familia'), (2, 'Conyuge o Compañero(a)'), (3, 'Hijo(a)'), (4, 'Hermano(a)'), (5, 'Padre o Madre'), (6, 'Otros')])),
                ('weight', models.CharField(blank=True, max_length=5, null=True)),
                ('size', models.CharField(blank=True, max_length=5, null=True)),
                ('level_education', models.IntegerField(choices=[(1, 'Preescolar'), (2, 'Basica Primaria'), (3, 'Basica Secundaria'), (4, 'Media Academica o Clasica'), (5, 'Media Tecnica (Bachillerato Tecnico)'), (6, 'Normalista'), (7, 'Tecnica Profesional'), (8, 'Tecnologica'), (9, 'Profesional'), (10, 'Especializacion'), (11, 'Maestria'), (12, 'Doctorado'), (13, 'Ninguno')])),
                ('affiliation_regime', models.IntegerField(choices=[(1, 'Subsidiado'), (2, 'Contributivo'), (3, 'Especial'), (4, 'Excepcion'), (5, 'No Afiliado')])),
                ('eps', models.CharField(choices=[('CCF033', 'CAJA DE COMPENSACIÓN FAMILIAR DE SUCRE'), ('CCF050', "CAJA DE COMPENSACIÓN FAMILIAR C.C.F. DEL ORIENTE COLOMBIANO 'COMFAORIENTE'"), ('CCF055', 'CAJA DE DE COMPENSACION FAMILIAR  CAJACOPI ATLANTICO'), ('CCF102', 'CAJA DE COMPENSACIÓN FAMILIAR DEL CHOCÓ COMFACHOCO'), ('CCFC20', 'CAJA DE COMPENSACIÓN FAMILIAR DEL CHOCÓ COMFACHOCO-CM'), ('CCFC33', 'CAJA DE COMPENSACIÓN FAMILIAR DE SUCRE-CM'), ('CCFC50', 'CAJA DE COMPENSACIÓN FAMILIAR C.C.F. DEL ORIENTE COLOMBIANO - COMFAORIENTE -CM'), ('CCFC55', 'CAJA DE DE COMPENSACION FAMILIAR  CAJACOPI ATLANTICO-CM'), ('EAS016', 'EMPRESAS PUBLICAS DE MEDELLIN-DEPARTAMENTO MEDICO'), ('EAS027', 'FONDO DE PASIVO SOCIAL DE LOS FERROCARRILES NALES'), ('EPS001', 'ALIANSALUD ENTIDAD PROMOTORA DE SALUD S.A.'), ('EPS002', 'SALUD  TOTAL  S.A.  E.P.S.'), ('EPS005', 'E.P.S.  SANITAS  S.A.'), ('EPS008', 'COMPENSAR   E.P.S.'), ('EPS010', 'EPS Y MEDICINA PREPAGADA SURAMERICANA S.A'), ('EPS012', 'COMFENALCO  VALLE  E.P.S.'), ('EPS017', 'E.P.S.  FAMISANAR  LTDA.'), ('EPS018', 'EPS SERVICIO OCCIDENTAL DE SALUD  S.A. - EPS S.O.S. S.A.'), ('EPS025', 'CAPRESOCA  EPS'), ('EPS037', 'LA NUEVA EPS S.A.'), ('EPS040', 'SAVIA SALUD EPS -CM'), ('EPS041', 'LA NUEVA EPS S.A.-CM'), ('EPS042', 'COOPERATIVA DE SALUD Y DESARROLLO INTEGRAL ZONA SUR ORIENTAL DE CARTAGENA - COOSALUD'), ('EPS046', 'FUNDACIÓN SALUD MIA EPS'), ('EPS047', 'SALUD BOLIVAR EPS SAS'), ('EPS048', 'ASOCIACION MUTUAL SER EMPRESA SOLIDARIA DE SALUD EPS-S MUTUAL SER EPS-S'), ('EPSC25', 'CAPRESOCA  EPS-CM'), ('EPSC34', 'CAPITAL SALUD-CM'), ('EPSI01', 'ASOCIACIÓN INDÍGENA DEL CESAR Y LA GUAJIRA  DUSAKAWI'), ('EPSI03', 'ASOCIACIÓN INDÍGENA DEL CAUCA'), ('EPSI04', 'ANASWAYUU'), ('EPSI05', 'MALLAMAS'), ('EPSI06', 'PIJAOS SALUD EPSI'), ('EPSIC1', 'ASOCIACIÓN INDÍGENA DEL CESAR Y LA GUAJIRA DUSAKAWI-CM'), ('EPSIC3', 'ASOCIACIÓN INDÍGENA DEL CAUCA - AIC -CM'), ('EPSIC4', 'ANASWAYUU-CM'), ('EPSIC5', 'MALLAMAS-CM'), ('EPSIC6', 'PIJAOS SALUD EPSI-CM'), ('EPSS01', 'ALIANSALUD ENTIDAD PROMOTORA DE SALUD S.A.-CM'), ('EPSS02', 'SALUD  TOTAL  S.A.  E.P.S. CM'), ('EPSS05', 'E.P.S.  SANITAS  S.A.-CM'), ('EPSS08', 'COMPENSAR   E.P.S.-CM'), ('EPSS10', 'EPS Y MEDICINA PREPAGADA SURAMERICANA S.A-CM'), ('EPSS12', 'COMFENALCO  VALLE  E.P.S.-CM'), ('EPSS17', 'E.P.S.  FAMISANAR  LTDA.-CM'), ('EPSS18', 'EPS SERVICIO OCCIDENTAL DE SALUD  S.A. - EPS S.O.S. S.A.-CM'), ('EPS025', 'CAPRESOCA  EPS'), ('EPS037', 'LA NUEVA EPS S.A.'), ('EPS040', 'SAVIA SALUD EPS'), ('EPS041', 'LA NUEVA EPS S.A.'), ('EPS042', 'COOPERATIVA DE SALUD Y DESARROLLO INTEGRAL ZONA SUR ORIENTAL DE CARTAGENA - COOSALUD'), ('EPS046', 'FUNDACIÓN SALUD MIA EPS'), ('EPS047', 'SALUD BOLIVAR EPS SAS'), ('EPS048', 'ASOCIACION MUTUAL SER EMPRESA SOLIDARIA DE SALUD EPS-S MUTUAL SER EPS-S'), ('EPSC25', 'CAPRESOCA  EPS-CM'), ('EPSC34', 'CAPITAL SALUD-CM'), ('EPSI01', 'ASOCIACIÓN INDÍGENA DEL CESAR Y LA GUAJIRA  DUSAKAWI'), ('EPSI03', 'ASOCIACIÓN INDÍGENA DEL CAUCA'), ('EPSI04', 'ANASWAYUU'), ('EPSI05', 'MALLAMAS'), ('EPSI06', 'PIJAOS SALUD EPSI'), ('EPSIC1', 'ASOCIACIÓN INDÍ\x8dGENA DEL CESAR Y LA GUAJIRA DUSAKAWI-CM'), ('EPSIC3', 'ASOCIACIÓN INDÍGENA DEL CAUCA - AIC -CM'), ('EPSIC4', 'ANASWAYUU-CM'), ('EPSIC5', 'MALLAMAS-CM'), ('EPSIC6', 'PIJAOS SALUD EPSI-CM'), ('EPSS01', 'ALIANSALUD ENTIDAD PROMOTORA DE SALUD S.A.-CM'), ('EPSS02', 'SALUD  TOTAL  S.A.  E.P.S. CM'), ('EPSS05', 'E.P.S.  SANITAS  S.A.-CM'), ('EPSS08', 'COMPENSAR   E.P.S.-CM'), ('EPSS10', 'EPS Y MEDICINA PREPAGADA SURAMERICANA S.A-CM'), ('EPSS12', 'COMFENALCO  VALLE  E.P.S.-CM'), ('EPSS17', 'E.P.S.  FAMISANAR  LTDA.-CM'), ('EPSS18', 'EPS SERVICIO OCCIDENTAL DE SALUD  S.A. - EPS S.O.S. S.A.-CM'), ('EPSS34', 'CAPITAL SALUD'), ('EPSS37', 'NUEVA EPS S.A. -CM'), ('EPSS40', 'SAVIA SALUD EPS'), ('EPSS41', 'LA NUEVA EPS S.A.'), ('EPSS42', 'COOPERATIVA DE SALUD Y DESARROLLO INTEGRAL ZONA SUR ORIENTAL DE CARTAGENA - COOSALUD -CM'), ('EPSS46', 'FUNDACIÓN SALUD MIA - CM'), ('EPSS47', 'SALUD BOLIVA EPS SAS CM'), ('EPSS48', 'ASOCIACION MUTUAL SER EMPRESA SOLIDARIA DE SALUD EPS-S MUTUAL SER EPS-S - CM'), ('ESS024', 'COOPERATIVA DE SALUD Y DESARROLLO INTEGRAL ZONA SUR ORIENTAL DE CARTAGENA LTDA. COOSALUD E.S.S.'), ('ESS062', 'ASOCIACIÓN MUTUAL LA ESPERANZA ASMET  SALUD'), ('ESS118', 'ASOCIACIÓN MUTUAL EMPRESA SOLIDARIA DE SALUD DE NARIÑO E.S.S. EMSSANAR E.S.S.'), ('ESS207', 'ASOCIACIÓN MUTUAL SER EMPRESA SOLIDARIA DE SALUD ESS'), ('ESSC07', 'ASOCIACIÓN MUTUAL SER EMPRESA SOLIDARIA DE SALUD ESS-CM'), ('ESSC18', 'ASOCIACIÓN MUTUAL EMPRESA SOLIDARIA DE SALUD DE NARIÑO E.S.S. EMSSANAR E.S.S.-CM'), ('ESSC24', 'COOPERATIVA DE SALUD Y DESARROLLO INTEGRAL ZONA SUR ORIENTAL DE CARTAGENA LTDA. COOSALUD E.S.S.-CM'), ('ESSC62', 'ASOCIACIÓN MUTUAL LA ESPERANZA ASMET  SALUD-CM'), ('INP001', 'INPEC'), ('RES002', 'ECOPETROL'), ('RES004', 'MAGISTERIO'), ('RES005', 'UATLANTICO'), ('RES006', 'CAPRUIS'), ('RES007', 'UVALLE'), ('RES008', 'UNISALUD'), ('RES009', 'UCAUCA'), ('RES010', 'UCARTAGENA'), ('RES012', 'UCORDOBA'), ('RES013', 'UNARIÑO'), ('RES014', 'UPTC')])),
                ('etnia', models.IntegerField(choices=[(1, 'Indígena'), (2, 'ROM Gitano'), (3, 'Raizal'), (4, 'Palenquero de San Basilio'), (5, 'Negro, Mulato, Afro'), (6, 'Ninguna de las anteriores'), (7, 'Otro')])),
                ('indigena', models.IntegerField(blank=True, choices=[(1, 'AMAZONAS KAWIYARI'), (2, 'AMAZONAS SIONA'), (3, 'AMAZONAS YAGUA'), (4, 'AMAZONAS BARASANO'), (5, 'AMAZONAS LETUAMA'), (6, 'AMAZONAS MAKU'), (7, 'AMAZONAS ANDOQUE'), (8, 'AMAZONAS COCAMA'), (9, 'AMAZONAS BORA'), (10, 'AMAZONAS MUINANE'), (11, 'AMAZONAS INGA'), (12, 'AMAZONAS OCAINA'), (13, 'AMAZONAS NONUYA'), (14, 'AMAZONAS MACUNA'), (15, 'AMAZONAS MIRAÑA'), (16, 'AMAZONAS MURUI O WITOTO'), (17, 'AMAZONAS YUKUNA'), (18, 'AMAZONAS CUBEO'), (19, 'AMAZONAS PASEÉ'), (20, 'AMAZONAS TANIMUCA'), (21, 'AMAZONAS TAIWANO'), (22, 'AMAZONAS KARIJONA'), (23, 'AMAZONAS MATAPI'), (24, 'AMAZONAS TARIANO'), (25, 'AMAZONAS MURUI O WITOTO'), (26, 'AMAZONAS JURUMI-URTUMI(Pueblo Indígena en Aislamiento)'), (27, 'AMAZONAS YURI'), (28, 'AMAZONAS YARÍ'), (29, 'AMAZONAS TICUNA'), (30, 'ANTIOQUIA CUNA'), (31, 'ANTIOQUIA EMBERA KATIO'), (32, 'ANTIOQUIA EMBERA CHAMI'), (33, 'ANTIOQUIA ZENU'), (34, 'ANTIOQUIA NUTABE'), (35, 'ARAUCA UWA'), (36, 'ARAUCA BETOYE O GUAHIBO'), (37, 'ARAUCA CHIRICOA'), (38, 'ARAUCA PIAPOCO'), (39, 'ARAUCA HITNU O MACAHUAN'), (40, 'ARAUCA SIKUANI'), (41, 'ARAUCA CUIBA'), (42, 'ATLANTICO MOKANA'), (43, 'BOGOTA PIJAO'), (44, 'BOGOTA KICHWA'), (45, 'BOGOTA INGA'), (46, 'BOGOTA MUISCA'), (47, 'BOLIVAR ZENU'), (48, 'BOYACA EMBERA KATIO'), (49, 'BOYACA EMBERA CHAMI'), (50, 'BOYACA UWA'), (51, 'CALDAS EMBERA KATIO'), (52, 'CALDAS EMBERA CHAMI'), (53, 'CAQUETA ANDOQUE'), (54, 'CAQUETA COREGUAJE'), (55, 'CAQUETA EMBERA CHAMI'), (56, 'CAQUETA EMBERA KATIO'), (57, 'CAQUETA INGA'), (58, 'CAQUETA MISAK'), (59, 'CAQUETA NASA'), (60, 'CAQUETA PIJAO'), (61, 'CAQUETA TUCANO'), (62, 'CAQUETA PIRATAPUYO'), (63, 'CAQUETA MURUI O WITOTO'), (64, 'CAQUETA MACAGUAJE'), (65, 'CASANARE MASIGUARE'), (66, 'CASANARE AMORUA'), (67, 'CASANARE CUIBA'), (68, 'CASANARE BETOYE O GUAHIBO'), (69, 'CASANARE SALIVA'), (70, 'CASANARE TSIRIPU'), (71, 'CASANARE PIAPOCO'), (72, 'CASANARE YAMALERO'), (73, 'CASANARE WIPIGUI'), (74, 'CASANARE NASA'), (75, 'CASANARE YARURO'), (76, 'CASANARE UWA'), (77, 'CAUCA CHAPA'), (78, 'CAUCA AMBALO'), (79, 'CAUCA EMBERA CHAMI'), (80, 'CAUCA EPERARA SIAPIDARA'), (81, 'CAUCA MISAK'), (82, 'CAUCA INGA'), (83, 'CAUCA KIZGO'), (84, 'CAUCA KOKONUCO'), (85, 'CAUCA YANACONA'), (86, 'CAUCA NASA'), (87, 'CAUCA TOTORO'), (88, 'CAUCA POLINDARA'), (89, 'CESAR ARHUACO'), (90, 'CESAR WIWA'), (91, 'CESAR YUKPA'), (92, 'CESAR KOGUI'), (93, 'CESAR KANKUAMO'), (94, 'CESAR CHIMILA'), (95, 'CHOCO CUNA'), (96, 'CHOCO EMBERA CHAMI'), (97, 'CHOCO EMBERA KATIO'), (98, 'CHOCO WAUNANN'), (99, 'CHOCO ZENU'), (100, 'CORDOBA ZENU'), (101, 'CORDOBA EMBERA KATIO'), (102, 'CUNDINAMARCA MUISCA'), (103, 'CUNDINAMARCA KICHWA'), (104, "CUNDINAMARCA JE'ERURIWA"), (105, 'CUNDINAMARCA YUKUNA'), (106, 'CUNDINAMARCA MATAPI'), (107, 'CUNDINAMARCA MACUNA'), (108, 'CUNDINAMARCA YAUNA'), (109, 'GUAINIA CURRIPACO O  BANIVA'), (110, 'GUAINIA GUANANO'), (111, 'GUAINIA PUINAVE'), (112, 'GUAINIA CUBEO'), (113, 'GUAINIA DESANO'), (114, 'GUAINIA TUCANO'), (115, 'GUAINIA PIRATAPUYO'), (116, 'GUAINIA PIAPOCO'), (117, 'GUAINIA GUARIQUEMA'), (118, 'GUAINIA SIKUANI'), (119, 'GUAINIA NUKAK'), (120, 'GUAJIRA WAYUU'), (121, 'GUAJIRA KOGUI'), (122, 'GUAJIRA WIWA'), (123, 'GUAJIRA ARHUACO'), (124, 'GUAJIRA CARIACHIL'), (125, 'GUAVIARE KARIJONA'), (126, 'GUAVIARE CUBEO'), (127, 'GUAVIARE DESANO'), (128, 'GUAVIARE TUYUCA'), (129, 'GUAVIARE SIRIANO'), (130, 'GUAVIARE GUANANO'), (131, 'GUAVIARE PIRATAPUYO'), (132, 'GUAVIARE TARIANO'), (133, 'GUAVIARE CURRIPACO O BANIVA'), (134, 'GUAVIARE YURITI'), (135, 'GUAVIARE BETOYE O GUAHIBO'), (136, 'GUAVIARE KARAPANA'), (137, 'GUAVIARE NUKAK'), (138, 'GUAVIARE PUINAVE'), (139, 'GUAVIARE SIKUANI'), (140, 'HUILA MISAK'), (141, 'HUILA NASA'), (142, 'HUILA ANDAQUI'), (143, 'HUILA PIJAO'), (144, 'HUILA TAMAS (DUJOS DEPANIQUITA)'), (145, 'HUILA YANACONA'), (146, 'MAGDALENA ARHUACO'), (147, 'MAGDALENA CHIMILA'), (148, 'MAGDALENA KOGUI'), (149, 'MAGDALENA WIWA'), (150, 'META ACHAGUA'), (151, 'META EMBERA CHAMI'), (152, 'META EMBERA KATIO'), (153, 'META BETOYE O GUAHIBO'), (154, 'META PIAPOCO'), (155, 'META GUANANO'), (156, 'META GUAYABERO O JIW'), (157, 'META INGA'), (158, 'META MISAK'), (159, 'META NASA'), (160, 'META SALIVA'), (161, 'META SIKUANI'), (162, 'META MURUI O WITOTO'), (163, 'META TATUYO'), (164, 'META BORA'), (165, 'NARIÑO AWA'), (166, 'NARIÑO EPERARA SIAPIDARA'), (167, 'NARIÑO INGA'), (168, 'NARIÑO KOFAN'), (169, 'NARIÑO NASA'), (170, 'NARIÑO PASTO'), (171, 'NARIÑO QUILLASINGA'), (172, 'NORTE DE SANTANDER MOTILON BARI'), (173, 'NORTE DE SANTANDER UWA'), (174, 'PUTUMAYO AWA'), (175, 'PUTUMAYO INGA'), (176, 'PUTUMAYO KATMENSA'), (177, 'PUTUMAYO COREGUAJE'), (178, 'PUTUMAYO EMBERA CHAMI'), (179, 'PUTUMAYO EMBERA KATIO'), (180, 'PUTUMAYO KICHWA'), (181, 'PUTUMAYO KOFAN'), (182, 'PUTUMAYO MURUI O WITOTO'), (183, 'PUTUMAYO MUINANE'), (184, 'PUTUMAYO NASA'), (185, 'PUTUMAYO PASTO'), (186, 'PUTUMAYO SIONA'), (187, 'PUTUMAYO YANACONA'), (188, 'QUINDIO EMBERA CHAMI'), (189, 'RISARALDA EMBERA CHAMI'), (190, 'RISARALDA EMBERA KATIO'), (191, 'SANTANDER UWA'), (192, 'SANTANDER EMBERA CHAMI'), (193, 'SUCRE ZENU'), (194, 'TOLIMA NASA'), (195, 'TOLIMA PIJAO'), (196, 'VALLE DEL CAUCA EMBERA CHAMI'), (197, 'VALLE DEL CAUCA EPERARA SIAPIDARA'), (198, 'VALLE DEL CAUCA NASA'), (199, 'VALLE DEL CAUCA PASTO'), (200, 'VALLE DEL CAUCA WAUNANN'), (201, 'VAUPES CUBEO'), (202, 'VAUPES TANIMUCA'), (203, 'VAUPES YUKUNA'), (204, 'VAUPES BARASANO'), (205, 'VAUPES LETUAMA'), (206, 'VAUPES MATAPI'), (207, 'VAUPES MACUNA'), (208, 'VAUPES MAKU'), (209, 'VAUPES TUCANO'), (210, 'VAUPES DESANO'), (211, 'VAUPES BARA'), (212, 'VAUPES PISAMIRA'), (213, 'VAUPES TINIGUIA'), (214, 'VAUPES CUBEO'), (215, 'VAUPES OTROS PUEBLOS'), (216, 'VICHADA AMORUA'), (217, 'VICHADA SIKUANI'), (218, 'VICHADA SALIVA'), (219, 'VICHADA CURRIPACO O BANIVA'), (220, 'VICHADA CUBEO'), (221, 'VICHADA PUINAVE'), (222, 'VICHADA BETOYE O GUAHIBO'), (223, 'VICHADA CUIBA'), (224, 'VICHADA PIAROA'), (225, 'VICHADA PIAPOCO'), (226, 'VICHADA MAPAYERRI')], null=True)),
                ('last_update', models.DateField(auto_now=True)),
                ('family_code', models.CharField(blank=True, max_length=60)),
                ('contact', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.contact')),
                ('family', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_charge', to='aps_api.family')),
                ('name_person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.names')),
            ],
        ),
        migrations.CreateModel(
            name='AtributesMember',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('group_demographic', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Niñas, niños y adolescentes'), (2, 'Gestantes'), (3, 'Persona adulta mayor'), (4, 'Persona con condición de discapacidad'), (5, 'Personas con orientación sexual diversa'), (6, 'Víctimas de violencia'), (7, 'Ninguno')]), size=None)),
                ('disability', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Física'), (2, 'Auditiva'), (3, 'Visual'), (4, 'Sordoceguera'), (5, 'Intelectual'), (6, 'Psicosocial (mental)'), (7, 'Múltiple'), (8, 'Otra'), (9, 'Ninguna')]), size=None)),
                ('chronic_condition', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('care_scheme', models.IntegerField(blank=True, choices=[(1, 'Si'), (2, 'No')], null=True)),
                ('pending_interventions', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Valoración Integral para la PYMS'), (2, 'Valoración integral por profesional en odontología para la PYMS'), (3, 'Promoción y apoyo a lactancia materna'), (4, 'Aplicación de flúor'), (5, 'Profilaxis y remoción de placa bacteriana'), (6, 'Vacunación de acuerdo con el esquema'), (7, 'Fortificación casera con micronutrientes en polvo'), (8, 'Suplementación con micronutrientes'), (9, 'Desparasitación intestinal antihelmíntica'), (10, 'Tamizaje para anemia - Hemoglobina y hematocrito'), (11, 'Planificación familiar y anticoncepción'), (12, 'Tamizaje de riesgo cardiovascular'), (13, 'Tamizaje para ITS'), (14, 'Tamizaje para cáncer de cuello uterino.'), (15, 'Tamizaje para cáncer de mama'), (16, 'Tamizaje para cáncer de próstata'), (17, 'Tamizaje para cáncer de colon y recto'), (18, 'Atención para el cuidado preconcepcional'), (19, 'Atención para el cuidado prenatal – Controles prenatales'), (20, 'Curso de preparación para la maternidad y paternidad'), (21, 'Interrupción Voluntaria del Embarazo'), (22, 'Atención del puerperio'), (23, 'Atención para el seguimiento del recién nacido'), (24, 'Preparación para la maternidad y la paternidad'), (25, 'Educación para la salud')]), blank=True, null=True, size=None)),
                ('health_promotion', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Lugar de atención lejano, cerrado o ausencia del profesional de salud'), (2, 'Horarios de atención restringidos'), (3, 'Largos tiempos de espera'), (4, 'No había disponibilidad de la tecnología'), (5, 'Desconocimiento del derecho a las intervenciones de DTPE'), (6, 'Desconocimiento que las intervenciones son gratuitas'), (7, 'Persona enferma'), (8, 'Persona hospitalizada'), (9, 'Orden médica por enfermedad'), (10, 'Falta de tiempo del cuidador'), (11, 'Rechazo de la atención por tradición o cultura'), (12, 'No afiliado')]), blank=True, null=True, size=None)),
                ('sport', models.IntegerField(blank=True, choices=[(1, 'Si'), (2, 'No')], null=True)),
                ('breastfeeding', models.IntegerField(blank=True, choices=[(1, 'Si'), (2, 'No')], null=True)),
                ('breastfeeding_months', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24), django.core.validators.RegexValidator(message='Este campo solo debe contener números.', regex='^[0-9]+$')])),
                ('under_five_years', models.IntegerField(blank=True, choices=[(1, 'Si'), (2, 'No')], null=True)),
                ('weight_for_height', models.IntegerField(blank=True, choices=[(1, 'Obesidad'), (2, 'Sobrepeso'), (3, 'Riesgo de Sobrepeso'), (4, 'Peso Adecuado para la Talla'), (5, 'Riesgo de Desnutrición Aguda'), (6, 'Desnutrición Aguda Moderada'), (7, 'Desnutrición Aguda Severa')], null=True)),
                ('brachial_perimeter', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)])),
                ('physical_signs_of_malnutrition', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Cabeza'), (2, 'Cara'), (3, 'Piel'), (4, 'Tórax y abdomen'), (5, 'Extremidades'), (6, 'Comportamiento')]), blank=True, null=True, size=None)),
                ('presented_disease', models.IntegerField(blank=True, choices=[(1, 'Si'), (2, 'No')], null=True)),
                ('disease_description', models.CharField(blank=True, max_length=200, null=True)),
                ('acute_disease_treatment', models.IntegerField(blank=True, choices=[(1, 'Si'), (2, 'No')], null=True)),
                ('reason_for_no_attention', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Lugar de atención lejano, cerrado o ausencia del profesional de salud'), (2, 'Horarios de atención restringidos'), (3, 'Largos tiempos de espera'), (4, 'No había disponibilidad de la tecnología'), (5, 'Falta de tiempo del cuidador'), (6, 'Tratamiento con remedios caseros'), (7, 'Rechazo de la atención por tradición o cultura'), (8, 'No afiliado')]), blank=True, null=True, size=None)),
                ('medical_care', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Médico tradicional'), (2, 'Partera'), (3, 'Sabedor de la salud propia'), (4, 'No aplica')]), size=None)),
                ('member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.member')),
            ],
        ),
        migrations.CreateModel(
            name='Pipelines',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('channel', models.CharField(max_length=150)),
                ('state', models.IntegerField(choices=[(1, 'Recolección por parte del servicio de aseo distrital o municipal'), (2, 'Enterramiento'), (3, 'Quema a campo abierto'), (4, 'Disposición en fuentes de agua cercana'), (5, 'Disposición a campo abierto'), (6, 'Otro')])),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aps_api.channelentity')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aps_api.member')),
            ],
        ),
        migrations.CreateModel(
            name='Pollster',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('job', models.CharField(choices=[('110', 'Oficiales de las Fuerzas Militares'), ('210', 'Suboficiales de las Fuerzas Militares'), ('310', 'Otros miembros de las Fuerzas Militares'), ('1111', 'Directores formuladores de políticas y normas'), ('1112', 'Directores del gobierno'), ('1113', 'Jefes de comunidades étnicas'), ('1114', 'Dirigentes de organizaciones con un interés específico partidos políticos, sindicatos y organizaciones sociales'), ('1120', 'Directores y gerentes generales'), ('1211', 'Directores financieros'), ('1212', 'Directores de recursos humanos'), ('1213', 'Directores de políticas y planificación'), ('1219', 'Directores de administración y servicios no clasificados en otros grupos primarios'), ('1221', 'Directores de ventas y comercialización'), ('1222', 'Directores de publicidad y relaciones públicas'), ('1223', 'Directores de investigación y desarrollo'), ('1311', 'Directores de producción agropecuaria y silvicultura'), ('1312', 'Directores de producción de piscicultura y pesca'), ('1321', 'Directores de industrias manufactureras'), ('1322', 'Directores de explotaciones de minería'), ('1323', 'Directores de empresas de construcción'), ('1324', 'Directores de empresas de abastecimiento, distribución y afines'), ('1330', 'Directores de servicios de tecnología de la información y las comunicaciones'), ('1341', 'Directores de servicios de cuidados infantiles'), ('1342', 'Directores de servicios de salud'), ('1343', 'Directores de servicios de atención a personas mayores'), ('1344', 'Directores de servicios de bienestar social'), ('1345', 'Directores de servicios de educación'), ('1346', 'Gerentes de sucursales de bancos, de servicios financieros y de seguros'), ('1349', 'Directores y gerentes de servicios profesionales no clasificados en otros grupos primarios'), ('1411', 'Gerentes de hoteles'), ('1412', 'Gerentes de restaurantes'), ('1420', 'Gerentes de comercios al por mayor y al por menor'), ('1431', 'Gerentes de centros deportivos, de esparcimiento y culturales'), ('1439', 'Otros gerentes de servicios no clasificados en otros grupos primarios'), ('2111', 'Físicos y astrónomos'), ('2112', 'Meteorólogos'), ('2113', 'Químicos'), ('2114', 'Geólogos y geofísicos'), ('2120', 'Matemáticos, actuarios y estadísticos'), ('2131', 'Biólogos, botánicos, zoólogos y afines'), ('2132', 'Agrónomos, silvicultores, zootecnistas y afines'), ('2133', 'Profesionales de la protección medioambiental'), ('2141', 'Ingenieros industriales y de producción'), ('2142', 'Ingenieros civiles'), ('2143', 'Ingenieros medioambientales'), ('2144', 'Ingenieros mecánicos'), ('2145', 'Ingenieros químicos'), ('2146', 'Ingenieros de minas, metalúrgicos y afines'), ('2149', 'Ingenieros no clasificados en otros grupos primarios'), ('2151', 'Ingenieros electricistas'), ('2152', 'Ingenieros electrónicos'), ('2153', 'Ingenieros de telecomunicaciones'), ('2161', 'Arquitectos constructores'), ('2162', 'Arquitectos paisajistas'), ('2163', 'Diseñadores de productos y de prendas'), ('2164', 'Planificadores urbanos, regionales y de tránsito'), ('2165', 'Cartógrafos y topógrafos'), ('2166', 'Diseñadores gráficos y multimedia'), ('2211', 'Médicos generales'), ('2212', 'Médicos especialistas'), ('2221', 'Profesionales de enfermería'), ('2222', 'Profesionales de partería'), ('2230', 'Profesionales de medicina tradicional y alternativa'), ('2240', 'Paramédicos e instrumentadores quirúrgicos'), ('2250', 'Veterinarios'), ('2261', 'Odontólogos'), ('2262', 'Farmacéuticos'), ('2263', 'Profesionales de la salud y la higiene laboral y ambiental'), ('2264', 'Fisioterapeutas'), ('2265', 'Dietistas y nutricionistas'), ('2266', 'Fonoaudiólogos y terapeutas del lenguaje'), ('2267', 'Optómetras'), ('2269', 'Otros profesionales de la salud no clasificados en otros grupos primarios'), ('2310', 'Profesores de instituciones de educación superior'), ('2320', 'Profesores de formación profesional'), ('2330', 'Profesores de educación secundaria'), ('2341', 'Profesores de educación primaria'), ('2342', 'Profesores de primera infancia'), ('2351', 'Especialistas en métodos pedagógicos'), ('2352', 'Profesores de educación especial e inclusiva'), ('2353', 'Otros profesores de idiomas'), ('2354', 'Otros profesores de música'), ('2355', 'Otros profesores de artes'), ('2356', 'Instructores de tecnología de la información'), ('2359', 'Otros profesionales de la educación no clasificados en otros grupos primarios'), ('2411', 'Contadores'), ('2412', 'Asesores financieros y de inversiones'), ('2413', 'Analistas financieros'), ('2421', 'Analistas de gestión y organización'), ('2422', 'Profesionales en políticas de administración'), ('2423', 'Profesionales de gestión de talento humano'), ('2424', 'Profesionales en formación y desarrollo de personal'), ('2431', 'Profesionales de la publicidad y la comercialización'), ('2432', 'Profesionales de relaciones públicas'), ('2433', 'Profesionales de ventas técnicas y médicas (excluyendo las TIC)'), ('2434', 'Profesionales de ventas de tecnología de la información y las comunicaciones'), ('2511', 'Analistas de sistemas'), ('2512', 'Desarrolladores de software'), ('2513', 'Desarrolladores web y multimedia'), ('2514', 'Programadores de aplicaciones'), ('2519', 'Desarrolladores y analistas de software y multimedia no clasificados en otros grupos primarios'), ('2521', 'Diseñadores y administradores de bases de datos'), ('2522', 'Administradores de sistemas'), ('2523', 'Profesionales en redes de computadores'), ('2529', 'Profesionales en bases de datos y en redes de computadores no clasificados en otros grupos primarios'), ('2611', 'Abogados'), ('2612', 'Jueces'), ('2619', 'Profesionales en derecho no clasificados en otros grupos primarios'), ('2621', 'Archivistas y curadores de arte'), ('2622', 'Bibliotecarios, documentalistas y afines'), ('2631', 'Economistas'), ('2632', 'Sociólogos, antropólogos y afines'), ('2633', 'Filósofos, historiadores y especialistas en ciencias políticas'), ('2634', 'Psicólogos'), ('2635', 'Profesionales del trabajo social y consejeros'), ('2636', 'Profesionales religiosos'), ('2641', 'Autores y otros escritores'), ('2642', 'Periodistas'), ('2643', 'Traductores, intérpretes y otros lingüistas'), ('2651', 'Escultores, pintores artísticos y afines'), ('2652', 'Compositores, músicos y cantantes'), ('2653', 'Coreógrafos y bailarines'), ('2654', 'Directores y productores de cine, de teatro y afines'), ('2655', 'Actores'), ('2656', 'Locutores de radio, televisión y otros medios de comunicación'), ('2659', 'Artistas creativos e interpretativos no clasificados en otros grupos primarios'), ('3111', 'Técnicos en ciencias físicas y químicas'), ('3112', 'Técnicos en ingeniería civil'), ('3113', 'Electrotécnicos'), ('3114', 'Técnicos en electrónica'), ('3115', 'Técnicos en ingeniería mecánica'), ('3116', 'Técnicos en química industrial'), ('3117', 'Técnicos de minas y metalurgia'), ('3118', 'Delineantes y dibujantes técnicos'), ('3119', 'Técnicos en ciencias físicas y en ingeniería no clasificados en otros grupos primarios'), ('3121', 'Supervisores de minas'), ('3122', 'Supervisores de industrias manufactureras'), ('3123', 'Supervisores de la construcción'), ('3131', 'Operadores de plantas de producción de energía'), ('3132', 'Operadores de incineradores, instalaciones de tratamiento de agua y afines'), ('3133', 'Controladores de instalaciones de procesamiento de productos químicos'), ('3134', 'Operadores de instalaciones de refinación de petróleo y gas natural'), ('3135', 'Operadores de procesos de producción de metales'), ('3139', 'Técnicos en control de procesos no clasificados en otros grupos primarios'), ('3141', 'Técnicos en ciencias biológicas (excluyendo la medicina)'), ('3142', 'Técnicos agropecuarios'), ('3143', 'Técnicos forestales'), ('3151', 'Oficiales maquinistas en navegación'), ('3152', 'Capitanes, oficiales de cubierta y prácticos'), ('3153', 'Pilotos de aviación y afines'), ('3154', 'Controladores de tráfico aéreo y marítimo'), ('3155', 'Técnicos en seguridad aeronáutica'), ('3211', 'Técnicos en aparatos de diagnóstico y tratamiento médico'), ('3212', 'Técnicos de laboratorios médicos'), ('3213', 'Técnicos y asistentes farmacéuticos'), ('3214', 'Técnicos de prótesis médicas y dentales'), ('3221', 'Técnicos y profesionales del nivel medio en enfermería'), ('3222', 'Técnicos y profesionales del nivel medio en partería'), ('3230', 'Técnicos y profesionales del nivel medio en medicina tradicional y alternativa'), ('3240', 'Técnicos y asistentes veterinarios'), ('3251', 'Higienistas y asistentes odontológicos'), ('3252', 'Técnicos en documentación sanitaria'), ('3253', 'Trabajadores comunitarios de la salud'), ('3254', 'Técnicos en optometría y ópticas'), ('3255', 'Técnicos y asistentes terapeutas'), ('3256', 'Asistentes médicos'), ('3257', 'Inspectores de seguridad, salud ocupacional, medioambiental y afines'), ('3258', 'Técnicos en atención prehospitalaria'), ('3259', 'Otros técnicos y profesionales del nivel medio de la salud, no clasificados en otros grupos primarios'), ('3311', 'Agentes de bolsa, cambio y otros servicios financieros'), ('3315', 'Tasadores y evaluadores'), ('3321', 'Agentes de seguros'), ('3322', 'Representantes comerciales'), ('3323', 'Agentes de compras'), ('3324', 'Agentes de operaciones comerciales y consignatarios'), ('3331', 'Declarantes o gestores de aduana'), ('3332', 'Organizadores de conferencias y eventos'), ('3333', 'Agentes de empleo y contratistas de mano de obra'), ('3334', 'Agentes inmobiliarios'), ('3339', 'Agentes de servicios comerciales no clasificados en otros grupos primarios'), ('3341', 'Supervisores de oficina'), ('3342', 'Secretarios jurídicos'), ('3343', 'Secretarios administrativos y ejecutivos'), ('3344', 'Secretarios médicos'), ('3351', 'Agentes de aduana e inspectores de frontera'), ('3352', 'Agentes de administración tributaria'), ('3353', 'Agentes de servicios de seguridad social'), ('3354', 'Agentes gubernamentales de expedición de licencias'), ('3355', 'Inspectores de policía y detectives'), ('3359', 'Agentes de gobierno y profesionales del nivel medio para la aplicación de regulaciones no clasificados en otros grupos primarios'), ('3411', 'Técnicos y profesionales del nivel medio del derecho de servicios legales y afines'), ('3412', 'Trabajadores y asistentes sociales'), ('3413', 'Auxiliares laicos de las religiones'), ('3421', 'Atletas y deportistas'), ('3422', 'Entrenadores, instructores y árbitros de actividades deportivas'), ('3423', 'Instructores de educación física y actividades recreativas'), ('3431', 'Fotógrafos'), ('3432', 'Diseñadores y decoradores de interiores'), ('3433', 'Técnicos en galerías de arte, museos y bibliotecas'), ('3434', 'Chefs'), ('3435', 'Otros técnicos y profesionales del nivel medio en actividades culturales y artísticas'), ('3511', 'Técnicos en operaciones de tecnología de la información y las comunicaciones'), ('3512', 'Técnicos en asistencia y soporte al usuario de tecnología de la información y las comunicaciones'), ('3513', 'Técnicos en redes y sistemas de computación'), ('3514', 'Técnicos de la Web'), ('3521', 'Técnicos de radiodifusión y grabación audiovisual'), ('3522', 'Técnicos de ingeniería de las telecomunicaciones'), ('4110', 'Oficinistas generales'), ('4120', 'Secretarios generales'), ('4131', 'Operadores de máquinas de procesamiento de texto y mecanógrafos'), ('4132', 'Grabadores de datos'), ('4211', 'Cajeros de bancos y afines'), ('4212', 'Receptores de apuestas y afines'), ('4213', 'Prestamistas'), ('4214', 'Cobradores y afines'), ('4221', 'Empleados y consultores de viajes'), ('4222', 'Empleados de centros de llamadas'), ('4223', 'Telefonistas'), ('4224', 'Recepcionistas de hoteles'), ('4225', 'Empleados de ventanillas de informaciones'), ('4226', 'Recepcionistas generales'), ('4227', 'Entrevistadores de encuestas y de investigaciones de mercados'), ('4229', 'Otros empleados de servicios de información al cliente no clasificados en otros grupos primarios'), ('4311', 'Auxiliares de contabilidad y cálculo de costos'), ('4312', 'Auxiliares de servicios estadísticos, financieros y de seguros'), ('4313', 'Auxiliares encargados de las nóminas'), ('4321', 'Empleados de control de abastecimientos e inventario'), ('4322', 'Empleados de servicios de apoyo a la producción'), ('4323', 'Empleados de servicios de transporte'), ('4411', 'Empleados de bibliotecas'), ('4412', 'Empleados de servicios de correos'), ('4413', 'Codificadores de datos, correctores de pruebas de imprenta y afines'), ('4414', 'Escribientes públicos y afines'), ('4415', 'Empleados de archivos'), ('4416', 'Empleados del servicio de personal'), ('4419', 'Otro personal de apoyo administrativo no clasificados en otros grupos primarios'), ('5111', 'Personal de servicio a pasajeros'), ('5112', 'Revisores y cobradores de los transportes públicos'), ('5113', 'Guías'), ('5120', 'Cocineros'), ('5131', 'Meseros'), ('5132', 'Bármanes'), ('5141', 'Peluqueros'), ('5142', 'Especialistas en tratamientos de belleza y afines'), ('5151', 'Supervisores de mantenimiento y limpieza en oficinas, hoteles y otros establecimientos'), ('5152', 'Mayordomos domésticos'), ('5153', 'Conserjes y afines'), ('5161', 'Astrólogos, adivinos y trabajadores afines'), ('5162', 'Acompañantes'), ('5163', 'Personal de servicios funerarios y embalsamadores'), ('5164', 'Cuidadores de animales'), ('5165', 'Instructores de conducción'), ('5169', 'Otros trabajadores de servicios personales no clasificados en otros grupos primarios'), ('5211', 'Vendedores de quioscos y de puestos de mercado'), ('5212', 'Vendedores ambulantes de alimentos preparados para consumo inmediato'), ('5221', 'Comerciantes de tiendas'), ('5222', 'Supervisores de tiendas y almacenes'), ('5223', 'Vendedores y auxiliares de venta en tiendas, almacenes y afines'), ('5230', 'Cajeros de comercio, taquilleros y expendedores de boletas'), ('5241', 'Modelos de moda, arte y publicidad'), ('5242', 'Demostradores de tiendas, almacenes y afines'), ('5243', 'Vendedores puerta a puerta'), ('5244', 'Vendedores a través de medios tecnológicos'), ('5245', 'Expendedores de combustibles para vehículos'), ('5246', 'Vendedores de comidas al mostrador'), ('5249', 'Otros vendedores no clasificados en otros grupos primarios'), ('5311', 'Cuidadores de niños'), ('5312', 'Auxiliares de maestros'), ('5321', 'Trabajadores de los cuidados personales en instituciones'), ('5322', 'Trabajadores de los cuidados personales a domicilio'), ('5329', 'Trabajadores de los cuidados personales en servicios de salud no clasificados en otros grupos primarios'), ('5411', 'Bomberos y rescatistas'), ('5412', 'Policías'), ('5413', 'Guardianes de prisión'), ('5414', 'Guardias de seguridad'), ('5419', 'Personal de los servicios de protección no clasificados en otros grupos primarios'), ('6111', 'Agricultores y trabajadores calificados de cultivos extensivos'), ('6112', 'Agricultores y trabajadores calificados de plantaciones de árboles y arbustos'), ('6113', 'Agricultores y trabajadores calificados de huertas, invernaderos, viveros y jardines'), ('6114', 'Agricultores y trabajadores calificados de cultivos mixtos'), ('6121', 'Criadores de ganado y trabajadores de la cría de animales domésticos (excepto aves de corral)'), ('6122', 'Avicultores y trabajadores calificados de la avicultura'), ('6123', 'Criadores y trabajadores calificados de la apicultura y la sericicultura'), ('6129', 'Criadores y trabajadores pecuarios calificados, avicultores y criadores de insectos no clasificados en otros grupos primarios'), ('6130', 'Productores y trabajadores calificados de explotaciones agropecuarias mixtas cuya producción se destina al mercado'), ('6210', 'Trabajadores forestales calificados y afines'), ('6221', 'Trabajadores de explotaciones de acuicultura'), ('6222', 'Pescadores de agua dulce y en aguas costeras'), ('6223', 'Pescadores de alta mar'), ('6224', 'Cazadores y tramperos'), ('6310', 'Trabajadores agrícolas de subsistencia'), ('6320', 'Trabajadores pecuarios de subsistencia'), ('6330', 'Trabajadores agropecuarios de subsistencia'), ('6340', 'Pescadores, cazadores, tramperos y recolectores de subsistencia'), ('7111', 'Constructores de casas'), ('7112', 'Albañiles'), ('7113', 'Labrantes, tronzadores y grabadores de piedra'), ('7114', 'Operarios en cemento armado, enfoscadores y afines'), ('7115', 'Carpinteros de armar y de obra blanca'), ('7119', 'Oficiales y operarios de la construcción de obra gruesa y afines no clasificados en otros grupos primarios'), ('7121', 'Techadores'), ('7122', 'Enchapadores, parqueteros y colocadores de suelos'), ('7123', 'Revocadores'), ('7124', 'Instaladores de material aislante y de insonorización'), ('7125', 'Cristaleros'), ('7126', 'Fontaneros e instaladores de tuberías'), ('7127', 'Mecánicos montadores de aire acondicionado y refrigeración'), ('7131', 'Pintores y empapeladores'), ('7132', 'Barnizadores y afines'), ('7133', 'Limpiadores de fachadas y deshollinadores'), ('7211', 'Moldeadores y macheros'), ('7212', 'Soldadores y oxicortadores'), ('7213', 'Chapistas y caldereros'), ('7214', 'Montadores de estructuras metálicas'), ('7215', 'Aparejadores y empalmadores de cables'), ('7221', 'Herreros y forjadores'), ('7222', 'Herramentistas y afines'), ('7223', 'Ajustadores y operadores de máquinas herramientas'), ('7224', 'Pulidores de metales y afiladores de herramientas'), ('7231', 'Mecánicos y reparadores de vehículos de motor'), ('7232', 'Mecánicos y reparadores de sistemas y motores de aeronaves'), ('7233', 'Mecánicos y reparadores de máquinas agrícolas e industriales'), ('7234', 'Reparadores de bicicletas y afines'), ('7311', 'Mecánicos y reparadores de instrumentos de precisión'), ('7312', 'Fabricantes y afinadores de instrumentos musicales'), ('7314', 'Alfareros y ceramistas (barro y arcilla)'), ('7315', 'Sopladores, modeladores, laminadores, cortadores y pulidores de vidrio'), ('7316', 'Rotulistas, pintores decorativos y grabadores'), ('7321', 'Preimpresores y afines'), ('7322', 'Impresores'), ('7323', 'Encuadernadores y afines'), ('7331', 'Tejedores con telares'), ('7332', 'Tejedores con agujas'), ('7333', 'Otros tejedores'), ('7341', 'Cesteros y mimbreros'), ('7342', 'Sombrereros artesanales'), ('7351', 'Talladores piezas artesanales de madera'), ('7352', 'Decoradores de piezas artesanales en madera'), ('7361', 'Joyeros'), ('7362', 'Orfebres y plateros'), ('7363', 'Bisuteros'), ('7370', 'Artesanos del cuero'), ('7391', 'Artesanos de papel'), ('7392', 'Artesanos del hierro y otros metales'), ('7393', 'Artesanos de las semillas y cortezas vegetales'), ('7399', 'Artesanos de otros materiales no clasificados en otros grupos primarios'), ('7411', 'Electricistas de obras y afines'), ('7412', 'Mecánicos y ajustadores electricistas'), ('7413', 'Instaladores y reparadores de líneas eléctricas'), ('7421', 'Mecánicos y reparadores en electrónica'), ('7422', 'Instaladores y reparadores en tecnología de la información y las comunicaciones'), ('7511', 'Carniceros, pescaderos y afines'), ('7512', 'Panaderos, pasteleros y confiteros'), ('7513', 'Operarios de la elaboración de productos lácteos'), ('7514', 'Operarios de la conservación de frutas, legumbres, verduras y afines'), ('7515', 'Catadores y clasificadores de alimentos y bebidas'), ('7516', 'Preparadores y elaboradores de tabaco y sus productos'), ('7521', 'Operarios del tratamiento de la madera'), ('7522', 'Ebanistas y carpinteros (excluye carpinteros de armar y de obra blanca)'), ('7523', 'Ajustadores y operadores de máquinas para trabajar madera'), ('7531', 'Sastres, modistos, peleteros y sombrereros'), ('7532', 'Patronistas y cortadores de tela, cuero y afines'), ('7533', 'Costureros, bordadores y afines'), ('7534', 'Tapiceros, colchoneros y afines'), ('7535', 'Apelambradores, pellejeros y curtidores'), ('7536', 'Zapateros y afines'), ('7541', 'Buzos'), ('7542', 'Dinamiteros y pegadores'), ('7543', 'Clasificadores y probadores de productos (excluyendo alimentos y bebidas)'), ('7544', 'Fumigadores y otros controladores de plagas y malas hierbas'), ('7549', 'Otros oficiales, operarios y oficios relacionados no clasificados en otros grupos primarios'), ('8111', 'Mineros y operadores de instalaciones mineras'), ('8112', 'Operadores de instalaciones de procesamiento de minerales y rocas'), ('8113', 'Perforadores y sondistas de pozos y afines'), ('8114', 'Operadores de máquinas para fabricar cemento y otros productos minerales'), ('8121', 'Operadores de instalaciones de procesamiento de metales'), ('8122', 'Operadores de máquinas pulidoras, galvanizadoras y recubridoras de metales'), ('8131', 'Operadores de plantas y máquinas de productos químicos'), ('8132', 'Operadores de máquinas para fabricar productos fotográficos'), ('8141', 'Operadores de máquinas para fabricar productos de caucho'), ('8142', 'Operadores de máquinas para fabricar productos de material plástico'), ('8143', 'Operadores de máquinas para fabricar productos de papel'), ('8151', 'Operadores de máquinas de preparación de fibras, hilado y devanado'), ('8152', 'Operadores de telares y otras máquinas tejedoras'), ('8153', 'Operadores de máquinas de coser'), ('8154', 'Operadores de máquinas de blanqueamiento, teñido y limpieza de tejidos'), ('8155', 'Operadores de máquinas de tratamiento de pieles y cueros'), ('8156', 'Operadores de máquinas para la fabricación de calzado y afines'), ('8157', 'Operadores de máquinas de lavandería'), ('8159', 'Operadores de máquinas para fabricar productos textiles y artículos de piel y cuero no clasificados en otros grupos primarios'), ('8160', 'Operadores de máquinas para elaborar alimentos y productos afines'), ('8171', 'Operadores de instalaciones para la preparación de pasta para papel y papel'), ('8172', 'Operadores de instalaciones de procesamiento de la madera'), ('8181', 'Operadores de máquinas y de instalaciones para elaborar productos de vidrio y cerámica'), ('8182', 'Operadores de máquinas de vapor y calderas'), ('8183', 'Operadores de máquinas de embalaje, embotellamiento y etiquetado'), ('8189', 'Otros operadores de máquinas y de instalaciones fijas no clasificados en otros grupos primarios'), ('8211', 'Ensambladores de maquinaria mecánica'), ('8212', 'Ensambladores de equipos eléctricos y electrónicos'), ('8219', 'Ensambladores no clasificados bajo otros grupos primarios'), ('8311', 'Maquinistas de locomotoras'), ('8312', 'Guardafrenos, guardagujas y agentes de maniobras'), ('8321', 'Conductores de motocicletas'), ('8323', 'Conductores de camionetas y vehículos livianos'), ('8324', 'Conductores de taxis'), ('8331', 'Conductores de buses, microbuses y tranvías'), ('8332', 'Conductores de camiones y vehículos pesados'), ('8341', 'Operadores de maquinaria agrícola y forestal móvil'), ('8342', 'Operadores de máquinas de movimiento de tierras, construcción de vías y afines'), ('8343', 'Operadores de grúas, aparatos elevadores y afines'), ('8344', 'Operadores de montacargas'), ('8350', 'Marineros de cubierta y afines'), ('9111', 'Personal doméstico'), ('9112', 'Aseadores de oficinas, hoteles y otros establecimientos'), ('9121', 'Lavanderos y planchadores manuales'), ('9122', 'Lavadores de vehículos'), ('9123', 'Lavadores de ventanas'), ('9129', 'Otro personal de limpieza no clasificados bajo otros grupos primarios'), ('9211', 'Obreros y peones de explotaciones agrícolas'), ('9212', 'Obreros y peones de explotaciones ganaderas'), ('9213', 'Obreros y peones de explotaciones agropecuarias'), ('9214', 'Obreros y peones de jardinería y horticultura'), ('9215', 'Obreros y peones forestales'), ('9216', 'Obreros y peones de pesca y acuicultura'), ('9311', 'Obreros y peones de minas y canteras'), ('9312', 'Obreros y peones de obras públicas y mantenimiento'), ('9313', 'Obreros y peones de la construcción de edificios'), ('9321', 'Empacadores manuales'), ('9329', 'Obreros y peones de la industria manufacturera no clasificados en otros grupos primarios'), ('9331', 'Conductores de vehículos accionados a pedal o a brazo'), ('9332', 'Conductores de vehículos y máquinas de tracción animal'), ('9333', 'Obreros y peones de carga'), ('9334', 'Surtidores de estanterías'), ('9411', 'Cocineros de comidas rápidas'), ('9412', 'Ayudantes de cocina'), ('9510', 'Trabajadores ambulantes de servicios y afines'), ('9520', 'Vendedores ambulantes (excluyendo comidas de preparación inmediata)'), ('9611', 'Recolectores de basura y material reciclable'), ('9612', 'Clasificadores de desechos'), ('9613', 'Barrenderos y afines'), ('9621', 'Mensajeros, mandaderos, maleteros y repartidores'), ('9622', 'Personas que realizan trabajos varios'), ('9624', 'Acarreadores de agua y recolectores de leña'), ('9625', 'Recolectores de dinero y surtidores de máquinas de venta automática'), ('9626', 'Lectores de medidores'), ('9629', 'Otras ocupaciones elementales no clasificadas en otros grupos primarios'), ('9998', 'Jubilado, desempleado, ama de casa, estudiante, dedicación al hogar, menor de edad'), ('9999', 'En los casos en que no se tiene esta información registrar')])),
                ('contact', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.contact')),
                ('name_person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.names')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='account', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NewFields',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('textJustify', models.CharField(blank=True, max_length=500, null=True)),
                ('longitud', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('latitud', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('creation_date', models.DateField(auto_now_add=True, db_index=True)),
                ('pollster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aps_api.pollster')),
            ],
        ),
        migrations.AddField(
            model_name='infogeneral',
            name='pollster',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aps_api.pollster'),
        ),
        migrations.AddField(
            model_name='channelentity',
            name='pollster',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.pollster'),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type_register', models.CharField(default='1', max_length=1)),
                ('type_entidad', models.IntegerField(blank=True, choices=[(1, 'NI'), (2, 'MU'), (3, 'DE'), (4, 'DI')], null=True)),
                ('id_entidad', models.CharField(blank=True, max_length=12, null=True)),
                ('date_init', models.DateField(auto_now_add=True)),
                ('date_final', models.DateField(auto_now_add=True)),
                ('numbers_family', models.IntegerField(default=0)),
                ('family', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.family')),
            ],
        ),
        migrations.CreateModel(
            name='Sanitation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('water_supply', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(blank=True, choices=[(1, 'Acueducto administrado por empresa prestadora (ESP)'), (2, 'Agua embotellada o en bolsa'), (3, 'Acueducto veredal o comunitario'), (4, 'Pila pública'), (5, 'Carro tanque'), (6, 'Abasto con distribución comunitaria'), (7, 'Pozo con bomba'), (8, 'Pozo sin bomba, aljibe, jagüey o barreno'), (9, 'Laguna o jagüey'), (10, 'Río, quebrada, manantial o nacimiento'), (11, 'Aguas lluvias'), (12, 'Aguatero'), (13, 'Otro')], null=True), size=None)),
                ('other_water_supply', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('disposal_system', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Sanitario conectado al alcantarillado'), (2, 'Sanitario y letrina'), (3, 'Sanitario conectado a pozo séptico'), (4, 'Sanitario ecológico seco'), (5, 'Sanitario sin conexión'), (6, 'Sanitario con disposición a fuente hídrica'), (7, 'Campo abierto'), (8, 'Otro')]), size=None)),
                ('other_disposal_system', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('residual_water', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Alcantarillado'), (2, 'Pozo séptico'), (3, 'Campo de oxidación'), (4, 'Biofiltro'), (5, 'Fuente hídrica'), (6, 'Campo abierto'), (7, 'Otro')]), size=None)),
                ('other_residual_water', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('solid_waste', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(choices=[(1, 'Recolección por parte del servicio de aseo distrital o municipal'), (2, 'Enterramiento'), (3, 'Quema a campo abierto'), (4, 'Disposición en fuentes de agua cercana'), (5, 'Disposición a campo abierto'), (6, 'Otro')]), size=None)),
                ('other_Solid_waste', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='Solo se permiten letras.', regex='^[a-zA-Z]*$')])),
                ('hygiene', models.IntegerField(verbose_name=((1, 'Si'), (2, 'No')))),
                ('food_hygiene', models.IntegerField(verbose_name=((1, 'Si'), (2, 'No')))),
                ('kitchen_toilet', models.IntegerField(verbose_name=((1, 'Si'), (2, 'No')))),
                ('handwashing', models.IntegerField(verbose_name=((1, 'Si'), (2, 'No')))),
                ('hygiene_element', models.IntegerField(verbose_name=((1, 'Si'), (2, 'No')))),
                ('brushed', models.IntegerField(verbose_name=((1, 'Cepillo y crema dental'), (2, 'Ademas Ceda dental'), (3, 'No'), (4, 'No refiere'), (5, 'Sin dato')))),
                ('living_place_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.livingplace')),
            ],
        ),
        migrations.CreateModel(
            name='Welfare',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tenure', models.IntegerField(choices=[(1, 'Propia'), (2, 'Propia Pagando'), (3, 'Anticresis'), (4, 'Arriendo'), (5, 'Subarriendo'), (6, 'Prestada sin costo')])),
                ('time_residence', models.CharField(max_length=250)),
                ('permanence', models.IntegerField(choices=[(1, 'Permanente'), (2, 'Permanece Fuera de la ciudad'), (3, 'Sin dato')])),
                ('lgtbi', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('life_style', models.IntegerField(choices=[(1, 'Sedenatrismo'), (2, 'Actividad Fisica'), (3, 'Consumo de cigarrillo'), (4, 'Consumo de Acohol'), (5, 'Consumo de otras SPA'), (6, 'Inadecuadas Prácticas alimentarias y nutricionales')])),
                ('alternative_health', models.IntegerField(choices=[(1, 'Si'), (2, 'No')])),
                ('family', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='aps_api.family')),
            ],
        ),
    ]
